generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model company {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?  @db.VarChar(255)
  name        String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user_id     String   @db.Uuid
  tenant_id   String   @db.VarChar(255)
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  order       order[]
  tool        tool[]
}

model order {
  id         String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String       @db.Uuid
  company_id String       @db.Uuid
  status     String       @db.VarChar(255)
  created_at DateTime     @default(now()) @db.Timestamp(6)
  updated_at DateTime     @default(now()) @db.Timestamp(6)
  company    company      @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user       user         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  order_item order_item[]
}

model order_item {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  order_id   String   @db.Uuid
  tool_id    String   @db.Uuid
  quantity   Int
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  order      order    @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tool       tool     @relation(fields: [tool_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model tool {
  id                  String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                String       @db.VarChar(255)
  description         String?      @db.VarChar(255)
  company_id          String       @db.Uuid
  availability_status Boolean?     @default(true)
  created_at          DateTime     @default(now()) @db.Timestamp(6)
  updated_at          DateTime     @default(now()) @db.Timestamp(6)
  order_item          order_item[]
  company             company      @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String    @unique @db.VarChar(255)
  firstName   String?   @db.VarChar(255)
  lastName    String?   @db.VarChar(255)
  roq_user_id String    @db.VarChar(255)
  tenant_id   String    @db.VarChar(255)
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @default(now()) @db.Timestamp(6)
  company     company[]
  order       order[]
}
